name: Build and Deploy to VPS

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and export
        uses: docker/build-push-action@v6
        with:
          context: .
          tags: gzgestao:${{ github.sha }}
          outputs: type=docker,dest=/tmp/gzgestao.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: gzgestao
          path: /tmp/gzgestao.tar

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: gzgestaoprod
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: gzgestao
          path: /tmp

      - name: Transfer files to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT }}
          source: "/tmp/gzgestao.tar,./docker-compose.prod.yml"
          target: "/home/deploy/gzgestao"

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        env:
          IMAGE_TAG: ${{ github.sha }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT }}
          envs: IMAGE_TAG
          script: |
            cd /home/deploy/gzgestao
            
            # Carregar a nova imagem
            docker load --input gzgestao.tar
            
            # Parar os contêineres existentes, remover contêineres parados e volumes não utilizados
            docker compose -f docker-compose.prod.yml down -v
            
            # Definir a variável de ambiente para a nova imagem
            export DOCKER_IMAGE=gzgestao:$IMAGE_TAG
            
            # Iniciar os novos contêineres
            docker compose -f docker-compose.prod.yml up -d
            
            # Verificar o status dos serviços
            docker compose -f docker-compose.prod.yml ps
            
            # Mostrar os logs (últimas 100 linhas)
            docker compose -f docker-compose.prod.yml logs --tail=100
            
            # Remover imagens antigas e o arquivo .tar
            docker image prune -af
            rm gzgestao.tar